{"ast":null,"code":"import { generationAPI } from './api';\nexport const getAIProviders = async () => {\n  try {\n    const response = await generationAPI.getAIProviders();\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch AI providers');\n  }\n};\nexport const generateAssets = async payload => {\n  try {\n    const response = await generationAPI.generateAssets(payload);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Generation failed');\n  }\n};\nexport const getGenerationJob = async jobId => {\n  try {\n    const response = await generationAPI.getGenerationJob(jobId);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch job status');\n  }\n};","map":{"version":3,"names":["generationAPI","getAIProviders","response","data","error","Error","generateAssets","payload","_error$response","_error$response$data","message","getGenerationJob","jobId"],"sources":["C:/New folder/New folder/project/src/services/generation.js"],"sourcesContent":["import { generationAPI } from './api';\r\n\r\nexport const getAIProviders = async () => {\r\n  try {\r\n    const response = await generationAPI.getAIProviders();\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch AI providers');\r\n  }\r\n};\r\n\r\nexport const generateAssets = async (payload) => {\r\n  try {\r\n    const response = await generationAPI.generateAssets(payload);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Generation failed');\r\n  }\r\n};\r\n\r\nexport const getGenerationJob = async (jobId) => {\r\n  try {\r\n    const response = await generationAPI.getGenerationJob(jobId);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch job status');\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAErC,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACC,cAAc,CAAC,CAAC;IACrD,OAAOC,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAO,IAAK;EAC/C,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMF,aAAa,CAACM,cAAc,CAACC,OAAO,CAAC;IAC5D,OAAOL,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAI,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIJ,KAAK,CAAC,EAAAG,eAAA,GAAAJ,KAAK,CAACF,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,mBAAmB,CAAC;EACvE;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMF,aAAa,CAACW,gBAAgB,CAACC,KAAK,CAAC;IAC5D,OAAOV,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}