{"ast":null,"code":"var _jsxFileName = \"C:\\\\New folder\\\\New folder\\\\project\\\\src\\\\components\\\\generation\\\\ProgressTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { CheckCircle, Clock, AlertCircle } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressTracker = ({\n  jobId,\n  onComplete\n}) => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [status, setStatus] = useState('pending');\n  const [completedAssets, setCompletedAssets] = useState(0);\n  const [totalAssets, setTotalAssets] = useState(0);\n  const [currentAsset, setCurrentAsset] = useState('');\n  useEffect(() => {\n    if (!jobId) return;\n\n    // Mock progress tracking\n    const interval = setInterval(() => {\n      setProgress(prev => {\n        const newProgress = Math.min(prev + Math.random() * 10, 100);\n        if (newProgress >= 100) {\n          setStatus('completed');\n          setCompletedAssets(totalAssets || 5);\n          onComplete && onComplete({\n            id: jobId,\n            completedAssets: totalAssets || 5,\n            results: []\n          });\n          clearInterval(interval);\n        } else {\n          setStatus('processing');\n          setCompletedAssets(Math.floor(newProgress / 100 * (totalAssets || 5)));\n          setCurrentAsset(`Asset ${Math.floor(newProgress / 20) + 1}`);\n        }\n        return newProgress;\n      });\n    }, 1000);\n    setTotalAssets(5); // Mock total\n\n    return () => clearInterval(interval);\n  }, [jobId, onComplete, totalAssets]);\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'completed':\n        return /*#__PURE__*/_jsxDEV(CheckCircle, {\n          size: 20,\n          className: \"text-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this);\n      case 'processing':\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          size: 20,\n          className: \"text-blue-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this);\n      case 'failed':\n        return /*#__PURE__*/_jsxDEV(AlertCircle, {\n          size: 20,\n          className: \"text-red-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          size: 20,\n          className: \"text-gray-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-info\",\n        children: [getStatusIcon(), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-text\",\n          children: status === 'completed' ? 'Generation Complete' : status === 'processing' ? 'Generating Assets...' : 'Preparing...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-percentage\",\n        children: [Math.round(progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-fill\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-details\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [completedAssets, \" of \", totalAssets, \" assets completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), currentAsset && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Processing: \", currentAsset]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), status === 'completed' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"completion-message\",\n      children: [/*#__PURE__*/_jsxDEV(CheckCircle, {\n        size: 24,\n        className: \"text-green-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"All assets generated successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressTracker, \"Rix+8ftWmpGlSDUXO30uAZcU/94=\");\n_c = ProgressTracker;\nexport default ProgressTracker;\nvar _c;\n$RefreshReg$(_c, \"ProgressTracker\");","map":{"version":3,"names":["React","useState","useEffect","CheckCircle","Clock","AlertCircle","jsxDEV","_jsxDEV","ProgressTracker","jobId","onComplete","_s","progress","setProgress","status","setStatus","completedAssets","setCompletedAssets","totalAssets","setTotalAssets","currentAsset","setCurrentAsset","interval","setInterval","prev","newProgress","Math","min","random","id","results","clearInterval","floor","getStatusIcon","size","className","fileName","_jsxFileName","lineNumber","columnNumber","children","round","style","width","_c","$RefreshReg$"],"sources":["C:/New folder/New folder/project/src/components/generation/ProgressTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CheckCircle, Clock, AlertCircle } from 'lucide-react';\r\n\r\nconst ProgressTracker = ({ jobId, onComplete }) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [status, setStatus] = useState('pending');\r\n  const [completedAssets, setCompletedAssets] = useState(0);\r\n  const [totalAssets, setTotalAssets] = useState(0);\r\n  const [currentAsset, setCurrentAsset] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!jobId) return;\r\n\r\n    // Mock progress tracking\r\n    const interval = setInterval(() => {\r\n      setProgress(prev => {\r\n        const newProgress = Math.min(prev + Math.random() * 10, 100);\r\n        \r\n        if (newProgress >= 100) {\r\n          setStatus('completed');\r\n          setCompletedAssets(totalAssets || 5);\r\n          onComplete && onComplete({\r\n            id: jobId,\r\n            completedAssets: totalAssets || 5,\r\n            results: []\r\n          });\r\n          clearInterval(interval);\r\n        } else {\r\n          setStatus('processing');\r\n          setCompletedAssets(Math.floor((newProgress / 100) * (totalAssets || 5)));\r\n          setCurrentAsset(`Asset ${Math.floor(newProgress / 20) + 1}`);\r\n        }\r\n        \r\n        return newProgress;\r\n      });\r\n    }, 1000);\r\n\r\n    setTotalAssets(5); // Mock total\r\n\r\n    return () => clearInterval(interval);\r\n  }, [jobId, onComplete, totalAssets]);\r\n\r\n  const getStatusIcon = () => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return <CheckCircle size={20} className=\"text-green-500\" />;\r\n      case 'processing':\r\n        return <Clock size={20} className=\"text-blue-500\" />;\r\n      case 'failed':\r\n        return <AlertCircle size={20} className=\"text-red-500\" />;\r\n      default:\r\n        return <Clock size={20} className=\"text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"progress-tracker\">\r\n      <div className=\"progress-header\">\r\n        <div className=\"status-info\">\r\n          {getStatusIcon()}\r\n          <span className=\"status-text\">\r\n            {status === 'completed' ? 'Generation Complete' : \r\n             status === 'processing' ? 'Generating Assets...' : \r\n             'Preparing...'}\r\n          </span>\r\n        </div>\r\n        <span className=\"progress-percentage\">{Math.round(progress)}%</span>\r\n      </div>\r\n\r\n      <div className=\"progress-bar\">\r\n        <div \r\n          className=\"progress-fill\" \r\n          style={{ width: `${progress}%` }}\r\n        ></div>\r\n      </div>\r\n\r\n      <div className=\"progress-details\">\r\n        <div className=\"progress-stats\">\r\n          <span>{completedAssets} of {totalAssets} assets completed</span>\r\n          {currentAsset && <span>Processing: {currentAsset}</span>}\r\n        </div>\r\n      </div>\r\n\r\n      {status === 'completed' && (\r\n        <div className=\"completion-message\">\r\n          <CheckCircle size={24} className=\"text-green-500\" />\r\n          <span>All assets generated successfully!</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}